{"version":3,"file":"Homepage.controller.js","names":["BaseController","_interopRequireDefault","__BaseController","Homepage","extend","onInit","_onInit","onBeforeRendering","_onBeforeRendering","this","setSkillMatrixData","_handleSuccess","oData","skillMatrixData","skillMatrixFormatter","skillMatrixJSON","JSONModel","getView","setModel","oTable","byId","columnNames","forEach","personnel","Object","keys","column","includes","push","i","length","oColumn","Column","width","header","Label","text","addColumn","oCell","cell1","Text","class","path","formatter","cellColorFormatter","aColList","ColumnListItem","cells","type","bindItems","template","_handleError","oError","MessageToast","show","_setSkillMatrixData","oModel","getModel","read","success","results","error","err","_skillMatrixFormatter","skillMatrix","combinedData","item","person","find","p","ID","fullName","country","hubName","skillName","replace","proficiencyLevel","onItemPress","_onItemPress","event","table","getSource","context","getParameter","getBindingContext","personnelID","getProperty","router","getRouter","navTo"],"sources":["Homepage.controller.ts"],"sourcesContent":["import Controller from \"sap/ui/core/mvc/Controller\";\nimport ODataModel from \"sap/ui/model/odata/v2/ODataModel\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport MessageToast from \"sap/m/MessageToast\";\nimport { IBindingParams, ISubmitChangeResponse, Routes } from \"../types/global.types\";\nimport SmartTable, { SmartTable$BeforeRebindTableEvent, SmartTable$InitialiseEvent } from \"sap/ui/comp/smarttable/SmartTable\";\nimport { EntitySet } from \"sap/ui/model/analytics/odata4analytics\";\nimport {  } from \"sap/m/Table\";\nimport oControlEvent  from \"sap/ui/core/Control\";\nimport { ISkillMatrix, ISkillMatrixCombined } from \"../types/global.types\"\nimport Table from \"sap/m/Table\";\nimport { ListBase$ItemPressEvent } from  \"sap/m/ListBase\";\nimport ColumnListItem from \"sap/m/ColumnListItem\";\nimport Column from \"sap/m/Column\";\nimport Label from \"sap/m/Label\";\nimport { foreach } from \"@sap/cds\";\nimport Text from \"sap/m/Text\";\nimport * as path from \"path\";\nimport BaseController from \"./BaseController\";\n/**\n * @namespace skillmatrixui.controller\n */\nexport default class Homepage extends BaseController {\n\n    /*eslint-disable @typescript-eslint/no-empty-function*/\n    public onInit(): void {\n\n    }\n\n    public onBeforeRendering(): void | undefined {\n        this.setSkillMatrixData()\n    }\n\n    private _handleSuccess(oData: ISkillMatrix[]): void {\n        // Handle the success case, for example, set data to a model\n        const skillMatrixData = this.skillMatrixFormatter(oData) as ISkillMatrixCombined[];\n        const skillMatrixJSON = new JSONModel(skillMatrixData);\n        this.getView()?.setModel(skillMatrixJSON, \"skillMatrix\");\n\n        let oTable = this.byId(\"skillMatrixTable\") as Table;\n\n        // Collect column names\n        let columnNames: String[] = [];\n        skillMatrixData.forEach(personnel => {\n            Object.keys(personnel).forEach(column => {\n                if (!columnNames.includes(column)) {\n                    columnNames.push(column);\n                }\n            });\n        });\n\n        // Create columns dynamically\n        for (let i = 0; i < columnNames.length; i++) {\n            var oColumn = new Column(\"col\" + i, {\n                width: \"1em\",\n                header: new Label({\n                    text: columnNames[i]\n                })\n            });\n            oTable.addColumn(oColumn);\n        }\n\n        // Create cells for each column\n        let oCell = [];\n        for (let i = 0; i < columnNames.length; i++) {\n            var cell1 = new Text({\n                text: `{skillMatrix>${columnNames[i]}}`,\n                class: {\n                    path: `skillMatrix>${columnNames[i]}`,\n                    formatter: this.cellColorFormatter\n                }\n            });\n            oCell.push(cell1);\n        }\n\n        // Create the ColumnListItem template\n        let aColList = new ColumnListItem({\n            cells: oCell,\n            type:\"Active\"\n        });\n\n        // Bind items once, after creating the columns\n        oTable.bindItems({\n            path: \"skillMatrix>/\",\n            template: aColList\n        });\n    }\n\n\n    private _handleError(oError: Error): void {\n        // Handle the error case, for example, show a message\n        MessageToast.show(\"An error occurred while calling the function\");\n    }\n\n    public setSkillMatrixData(): ISkillMatrix[] | void {\n        const oModel = this.getView()?.getModel() as ODataModel\n        oModel.read(\"/SkillMatrix\", {\n            success: (oData: { results: ISkillMatrix[] }) => {\n                this._handleSuccess(oData.results)\n            },\n            error: (err: Error) => {\n                this._handleError(err)\n                console.log(err)\n            }\n        })\n    }\n\n    public skillMatrixFormatter(skillMatrix: ISkillMatrix[]): ISkillMatrixCombined[] {\n\n        const combinedData: ISkillMatrixCombined[] = [];\n\n        skillMatrix.forEach(item => {\n            // Check if the person already exists in the output array\n            let person = combinedData.find(p => p.ID === item.ID)!;\n\n            if (!person) {\n                // If not found, create a new person object\n                person = {\n                    ID: item.ID,\n                    fullName: item.fullName,\n                    country: item.country,\n                    hubName: item.hubName\n                };\n                combinedData.push(person);\n            }\n\n            // Add the skill to the person object\n            person[(item.skillName).replace(/ /g, '')] = item.proficiencyLevel;\n        });\n\n        return combinedData;\n\n    }\n\n    public onItemPress(event:ListBase$ItemPressEvent):void{\n        let table = event.getSource();\n        let context = event.getParameter(\"listItem\")?.getBindingContext(\"skillMatrix\");\n        let personnelID = context?.getProperty(\"ID\");\n\n        let router = this.getRouter();\n        router.navTo(\"RoutePersonnelDetail\",{personnelID:personnelID})\n    }\n\n}"],"mappings":"gTAkBOA,EAAcC,EAAAC,GACrB,MAGqBC,EAAiBH,EAAcI,OAAA,qCAGzCC,OAAM,SAAAC,IAEb,EAEOC,kBAAiB,SAAAC,IACpBC,KAAKC,oBACT,EAEQC,eAAc,SAAAA,EAACC,GAEnB,MAAMC,EAAkBJ,KAAKK,qBAAqBF,GAClD,MAAMG,EAAkB,IAAIC,EAAUH,GACtCJ,KAAKQ,WAAWC,SAASH,EAAiB,eAE1C,IAAII,EAASV,KAAKW,KAAK,oBAGvB,IAAIC,EAAwB,GAC5BR,EAAgBS,QAAQC,IACpBC,OAAOC,KAAKF,GAAWD,QAAQI,IAC3B,IAAKL,EAAYM,SAASD,GAAS,CAC/BL,EAAYO,KAAKF,EACrB,GACF,GAIN,IAAK,IAAIG,EAAI,EAAGA,EAAIR,EAAYS,OAAQD,IAAK,CACzC,IAAIE,EAAU,IAAIC,EAAO,MAAQH,EAAG,CAChCI,MAAO,MACPC,OAAQ,IAAIC,EAAM,CACdC,KAAMf,EAAYQ,OAG1BV,EAAOkB,UAAUN,EACrB,CAGA,IAAIO,EAAQ,GACZ,IAAK,IAAIT,EAAI,EAAGA,EAAIR,EAAYS,OAAQD,IAAK,CACzC,IAAIU,EAAQ,IAAIC,EAAK,CACjBJ,KAAM,gBAAgBf,EAAYQ,MAClCY,MAAO,CACHC,KAAM,eAAerB,EAAYQ,KACjCc,UAAWlC,KAAKmC,sBAGxBN,EAAMV,KAAKW,EACf,CAGA,IAAIM,EAAW,IAAIC,EAAe,CAC9BC,MAAOT,EACPU,KAAK,WAIT7B,EAAO8B,UAAU,CACbP,KAAM,gBACNQ,SAAUL,GAElB,EAGQM,aAAY,SAAAA,EAACC,GAEjBC,EAAaC,KAAK,+CACtB,EAEO5C,mBAAkB,SAAA6C,IACrB,MAAMC,EAAS/C,KAAKQ,WAAWwC,WAC/BD,EAAOE,KAAK,eAAgB,CACxBC,QAAU/C,IACNH,KAAKE,eAAeC,EAAMgD,QAAQ,EAEtCC,MAAQC,IACJrD,KAAK0C,aAAaW,EAAI,GAIlC,EAEOhD,qBAAoB,SAAAiD,EAACC,GAExB,MAAMC,EAAuC,GAE7CD,EAAY1C,QAAQ4C,IAEhB,IAAIC,EAASF,EAAaG,KAAKC,GAAKA,EAAEC,KAAOJ,EAAKI,IAElD,IAAKH,EAAQ,CAETA,EAAS,CACLG,GAAIJ,EAAKI,GACTC,SAAUL,EAAKK,SACfC,QAASN,EAAKM,QACdC,QAASP,EAAKO,SAElBR,EAAarC,KAAKuC,EACtB,CAGAA,EAAQD,EAAKQ,UAAWC,QAAQ,KAAM,KAAOT,EAAKU,gBAAgB,GAGtE,OAAOX,CAEX,EAEOY,YAAW,SAAAC,EAACC,GACf,IAAIC,EAAQD,EAAME,YAClB,IAAIC,EAAUH,EAAMI,aAAa,aAAaC,kBAAkB,eAChE,IAAIC,EAAcH,GAASI,YAAY,MAEvC,IAAIC,EAAS9E,KAAK+E,YAClBD,EAAOE,MAAM,uBAAuB,CAACJ,YAAYA,GACrD,IAAC,OAvHgBlF,CAAQ","ignoreList":[]}